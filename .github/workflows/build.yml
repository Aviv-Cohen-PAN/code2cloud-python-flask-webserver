name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v2

      - name: üêç Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v2

      - name: üîê Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ vars.AWS_REGION }}

      - name: üß∞ Install AWS CLI & kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          pip install --upgrade awscli
          aws --version
          kubectl version --client

      - name: üîê Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ vars.IMAGE_REGISTRY }}

      - name: üîÑ Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name eks-code2cloud-test --region ${{ vars.AWS_REGION }}

      - name: üèóÔ∏è Build Docker image
        run: |
          LATEST_SHA=$(git rev-parse HEAD)
          echo "LATEST_SHA=$LATEST_SHA" >> $GITHUB_ENV
          docker build -t ${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA .
          docker tag ${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA ${{ vars.IMAGE_REGISTRY }}:latest

      - name: üöÄ Push Docker image to AWS ECR
        run: |
          docker push ${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA
          docker push ${{ vars.IMAGE_REGISTRY }}:latest

      - name: üîç Check if deployment exists
        id: check-deployment
        run: |
          DEPLOYMENT_NAME=${{ vars.DEPLOYMENT_NAME }}
          DEPLOYMENT_EXISTS=$(kubectl get deployment $DEPLOYMENT_NAME -n default --ignore-not-found)
          
          echo "deployment_exists=$([ -z "$DEPLOYMENT_EXISTS" ] && echo "false" || echo "true")" >> $GITHUB_OUTPUT

      - name: üõ†Ô∏è Create deployment (if not exists)
        if: steps.check-deployment.outputs.deployment_exists == 'false'
        run: |
          echo "Creating new deployment: ${{ vars.DEPLOYMENT_NAME }}"
          kubectl create deployment ${{ vars.DEPLOYMENT_NAME }} \
            --image=${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA -n default

      - name: üîÑ Update deployment image (if exists)
        if: steps.check-deployment.outputs.deployment_exists == 'true'
        run: |
          DEPLOYMENT_NAME=${{ vars.DEPLOYMENT_NAME }}
          echo "Fetching container name from deployment $DEPLOYMENT_NAME..."
          CONTAINER_NAME=$(kubectl get deployment $DEPLOYMENT_NAME -n default -o jsonpath='{.spec.template.spec.containers[0].name}')
          echo "Container name detected: $CONTAINER_NAME"

          echo "Updating deployment image..."
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA -n default
