name: CI/CD

on:
  push:
    branches:
      - main  # or specify your branch here

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Change the Python version if needed

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS Credentials
        run: |
          echo "${{ secrets.AWS_ACCESS_KEY_ID }}" > aws_access_key_id
          echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" > aws_secret_access_key
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1  # Change region if needed

      - name: Install kubectl and AWS CLI
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          pip install awscli --upgrade
          aws --version

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.IMAGE_REGISTRY }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name eks-code2cloud-test --region eu-north-1  # Replace with your EKS cluster name

      - name: Build Docker image
        run: |
          LATEST_SHA=$(git rev-parse HEAD)
          echo "LATEST_SHA: $LATEST_SHA"  # Check the value of LATEST_SHA
          if [[ -z "$LATEST_SHA" ]]; then
            echo "Error: LATEST_SHA is empty, aborting."
            exit 1
          fi
          docker build -t ${{ secrets.IMAGE_REGISTRY }}:$LATEST_SHA .
          docker tag ${{ secrets.IMAGE_REGISTRY }}:$LATEST_SHA ${{ secrets.IMAGE_REGISTRY }}:latest

      - name: Push Docker image to AWS ECR
        run: |
          echo "Pushing image to AWS ECR..."
          docker push ${{ secrets.IMAGE_REGISTRY }}:$LATEST_SHA
          docker push ${{ secrets.IMAGE_REGISTRY }}:latest

      - name: Check if the deployment exists
        id: deployment
        run: |
          DEPLOYMENT_EXISTS=$(kubectl get deployment ${{ secrets.REPOSITORY }} -n default --ignore-not-found)
          echo "Deployment exists: $DEPLOYMENT_EXISTS"
          echo "::set-output name=exists::$DEPLOYMENT_EXISTS"

      - name: Create or update deployment in EKS
        run: |
          if [[ "${{ steps.deployment.outputs.exists }}" == "null" ]]; then
            echo "Deployment does not exist. Creating deployment."
            kubectl create deployment ${{ secrets.REPOSITORY }} --image=${{ secrets.IMAGE_REGISTRY }}:$LATEST_SHA -n default
          else
            echo "Deployment exists. Updating deployment."
            kubectl set image deployment/${{ secrets.REPOSITORY }} ${{ secrets.REPOSITORY }}=${{ secrets.IMAGE_REGISTRY }}:$LATEST_SHA -n default
          fi
