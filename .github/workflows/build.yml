name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ vars.AWS_REGION }}

      - name: Install AWS CLI & kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          pip install --upgrade awscli
          aws --version

      - name: Log in to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.IMAGE_REGISTRY }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name eks-code2cloud-test --region ${{ vars.AWS_REGION }}

      - name: Build Docker image
        run: |
          LATEST_SHA=$(git rev-parse HEAD)
          echo "LATEST_SHA=$LATEST_SHA" >> $GITHUB_ENV
          docker build -t ${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA .
          docker tag ${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA ${{ vars.IMAGE_REGISTRY }}:latest

      - name: Push Docker image to AWS ECR
        run: |
          docker push ${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA
          docker push ${{ vars.IMAGE_REGISTRY }}:latest

      - name: Deploy to EKS
        run: |
          # Check if the deployment exists
          kubectl get deployment ${{ vars.DEPLOYMENT_NAME }} -n default &> /dev/null
          if [ $? -ne 0 ]; then
            echo "Deployment does not exist. Creating..."
            kubectl create deployment ${{ vars.DEPLOYMENT_NAME }} --image=${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA -n default
          else
            echo "Deployment exists. Updating..."
            kubectl set image deployment/${{ vars.DEPLOYMENT_NAME }} ${{ vars.DEPLOYMENT_NAME }}=${{ vars.IMAGE_REGISTRY }}:$LATEST_SHA -n default
          fi

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/${{ vars.DEPLOYMENT_NAME }} -n default
